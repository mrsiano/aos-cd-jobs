

properties(
    [
        buildDiscarder(
            logRotator(
                artifactDaysToKeepStr: '',
                artifactNumToKeepStr: '',
                daysToKeepStr: '',
                numToKeepStr: '360'
            )
        ),
        [
            $class : 'ParametersDefinitionProperty',
            parameterDefinitions: [
                [
                    name: 'MOCK',
                    description: 'Mock run to pickup new Jenkins parameters?',
                    $class: 'hudson.model.BooleanParameterDefinition',
                    defaultValue: false,
                ],
                [
                    name: 'BUILD_VERSION',
                    description: 'OCP Version to build',
                    $class: 'hudson.model.ChoiceParameterDefinition',
                    choices: "4.0",
                    defaultValue: '4.0'
                ],
                [
                    name: 'TARGET_NODE',
                    description: 'Jenkins agent node',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: 'openshift-build-1'
                ],
                [
                    name: 'MAIL_LIST_SUCCESS',
                    description: 'Success Mailing List',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: [
                        'aos-team-art@redhat.com',
                    ].join(',')
                ],
                [
                    name: 'MAIL_LIST_FAILURE',
                    description: 'Failure Mailing List',
                    $class: 'hudson.model.StringParameterDefinition',
                    defaultValue: [
                        'aos-team-art@redhat.com',
                    ].join(',')
                ],

            ]
        ],
        disableConcurrentBuilds()
    ]
)

node(TARGET_NODE) {
    checkout scm

    def commonlib = load( "pipeline-scripts/commonlib.groovy")
    commonlib.initialize()

    def buildlib = load("pipeline-scripts/buildlib.groovy")
    // buildlib.initialize()
    buildlib.registry_quay_dev_login()

    echo "Initializing ${BUILD_VERSION} sync: #${currentBuild.number}"

    // doozer_working must be in WORKSPACE in order to have artifacts archived
    MIRROR_WORKING = "${WORKSPACE}/MIRROR_working"
    OC_MIRROR_INPUT = "${MIRROR_WORKING}/oc_mirror_input"
    OC_IS_OBJECT = "${MIRROR_WORKING}/release-is.yaml"
    BASE_IMAGE_STREAM = "/home/jenkins/base-art-latest-imagestream.yaml"
    CI_KUBECONFIG = "/home/jenkins/kubeconfigs/art-publish.kubeconfig"

    // See 'oc image mirror --help' for more information
    OC_FMT_STR = "registry.reg-aws.openshift.com:443/{repository}=quay.io/openshift-release-dev/ocp-v4.0-art-dev:{version}-{release}-{image_name_short}"

    //Clear out previous work
    sh "rm -rf ${MIRROR_WORKING}"
    sh "mkdir -p ${MIRROR_WORKING}"

    stage("Version dumps") {
        buildlib.doozer """
--version
"""
        sh "which doozer"
        sh "oc version"
    }

    // TRY all of this so we can save the generated artifacts before
    // throwing the exceptions
    try {
        // ######################################################################
        // This should create a list of SOURCE=DEST strings in the output file
        // May take a few minutes because doozer must query brew for each image
        stage("Generate SRC=DEST input") {
            buildlib.doozer """
--working-dir "${MIRROR_WORKING}" --group 'openshift-${BUILD_VERSION}'
beta:release-gen
--sd ${OC_MIRROR_INPUT}
--is ${OC_IS_OBJECT}
--isb ${BASE_IMAGE_STREAM}
'${OC_FMT_STR}'
"""
        }

        // ######################################################################
        // Now run the actual mirroring command. Wrapped this in a
        // retry loop because it is known to fail occassionally
        // depending on the health of the source/destination endpoints.
        stage("oc image mirror") {
            echo "Mirror SRC=DEST input:"
            sh "cat ${OC_MIRROR_INPUT}"
            retry (3) {
                buildlib.oc """
image
mirror
--filename=${OC_MIRROR_INPUT}
"""
            }
        }

        stage("oc apply") {
            echo "ImageStream Object to apply:"
            sh "cat ${OC_IS_OBJECT}"
            try {
                buildlib.oc """
apply
--filename=${OC_IS_OBJECT}
--kubeconfig ${CI_KUBECONFIG}
"""
            } catch (apply_error) {
                echo "Error applying image stream:"
                throw apply_error
            }
        }
    } finally {
        try {
            // Hold on to that mirror input and image stream
            archiveArtifacts allowEmptyArchive: true, artifacts: "${MIRROR_WORKING}/*"
        } catch (aae) {
        }
    }
}
